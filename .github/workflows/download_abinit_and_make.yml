name: Test External Repository

on:
  push:
  pull_request:
  schedule:
    - cron: '0 12 * * *'  # Runs daily at 12:00 UTC

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-latest
            python: "3.12"

    runs-on: ${{ matrix.config.os }}

    #runs-on: [x64|arm64|ppc64le|s390x]-ubuntu-latest
    #runs-on: ubuntu-latest
    #runs-on: arm64-ubuntu-latest

    steps:
    #- name: Checkout Abinit repository
    #  uses: actions/checkout@v4

    - name: Get Latest Release URL and Download it
      run: |
        # Repository details (change as needed)
        OWNER="abinit"
        REPO="abinit"

        # Fetch the latest release URL using GitHub API
        LATEST_URL=$(curl -s https://api.github.com/repos/$OWNER/$REPO/releases/latest | grep "tarball_url" | cut -d '"' -f 4)

        # Check if URL was retrieved successfully
        if [ -z "$LATEST_URL" ]; then
            echo "Error: Could not fetch the latest release URL. Check the repository name."
            exit 1
        fi

        # Download the latest release
        OUTPUT_FILE="latest-release.tar.gz"
        echo "Downloading latest release from: $LATEST_URL"
        curl -L -o $OUTPUT_FILE $LATEST_URL

        echo "Download complete: $OUTPUT_FILE"
        tar -zxvf latest-release.tar.gz
        mv abinit-abinit* latest-release

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y autoconf automake m4
        # 1 # compiler
        sudo apt install -y build-essential gfortran
        # 2 # MPI libraries - choice for Open MPI
        sudo apt install -y mpi-default-dev libopenmpi-dev
        # 3 # math libraries - choice for lapack and blas
        sudo apt install -y liblapack-dev libblas-dev
        # 4 # mandatory libraries
        sudo apt install -y libfftw3-dev
        sudo apt install -y libhdf5-dev libnetcdf-dev libnetcdff-dev libpnetcdf-dev libxc-dev

    - name: Run configure
      run: |
        cd latest-release
        # FIXME: This should not happen as users are not supposed to run autogen.sh
        ./autogen.sh
        #run: ./config/scripts/makemake

        first_line=$(head -n 1 .current_version)  # Get the first line
        echo "$first_line"

        if [[ "$first_line" == "UNKNOWN" ]]; then
          exit 1  # Stop the script if the first line is "UNKNOWN"
        fi

    - name: Print Env
      run: |
        echo "which mpifort\n:" `which mpifort`
        echo "which mpicc\n:" `which mpicc`
        echo "which mpicxx\n:" `which mpicxx`
        echo "nc-config --all\n:" `nc-config --all`
        echo "nf-config --all\n:" `nf-config --all`

    - name: Run configure
      run: |
        cd latest-release
        ./configure FC=mpifort CC=mpicc CXX=mpicxx FCFLAGS="-g -O0 -ffree-line-length-none -fallow-argument-mismatch" --with-mpi="yes"

    - name: Upload config.log
      uses: actions/upload-artifact@v4
      with:
        name: config.log
        path: latest-release/config.log

    - name: Run make
      run: |
        cd latest-release
        make -j | tee make.log

    - name: Run tests
      run: |
        cd latest-release/tests
        ./runtests.py v1 v2 -j8 --force-mpirun | tee runtests.log
        # Check if the exit status of the previous command is non-zero
        if [[ $? -ne 0 ]]; then
          echo "runtests.py failed. Exiting..."
          exit 1
        fi

    - name: Upload runtests.log
      uses: actions/upload-artifact@v4
      with:
        name: runtests.log
        path: latest-release/tests/runtests.log
